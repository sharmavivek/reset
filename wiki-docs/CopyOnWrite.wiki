_this file discusses the merits of an optimization technique_
==== Copy On Write _COW_ ====

The fundamental idea is that if multiple callers ask for resources which are initially indistinguishable, they can all be given pointers to the same resource. This function can be maintained until a caller tries to modify its "copy" of the resource, at which point a true private copy is created to prevent the changes becoming visible to everyone else. All of this happens transparently to the callers. The primary advantage is that if a caller never makes any modifications, no private copy need ever be created.

Copy-on-write finds its main use in virtual memory operating systems; when a process creates a copy of itself, the pages in memory that might be modified by either the process or its copy are *marked* copy-on-write.

Copy-on-write can be implemented by telling the MMU that certain pages in the process's address space are read-only. When data is written to these pages, the MMU raises an exception which is handled by the kernel, which allocates new space in physical memory and makes the page being written to correspond to that new location in physical memory.

The string class provided by the C++ standard library, for example, was specifically designed to allow copy-on-write implementations. Used heavily in Virtual-Machine

"User-mode Linux has one very special feature called a Copy-On-Write file or COW. Copy on write is a common computer science concept that defines a mechanism for a chunk of data to remain read-only yet allows modification by writing changed data blocks to an alternate location. The filesystem image you download always remains read-only. Changes made to the filesystem in our running UML system are written to the COW file. This allows us to boot up multiple UML systems from the same read-only root filesystem image, provided they all have separate COW files. Also, if our UML system becomes corrupted, we simply clear the COW file to start over. The COW files are what is called sparse files; even though they may appear to be big when viewing the file size, only non-null data is actually allocated space on the disk."

_other uses_ http://www.faqs.org/patents/app/20080270739

 # Many commercially available operating systems (OS) use copy-on-write as a method to achieve optimization in operations. Copy-on-Write (CoW) is used in a fork operation, where the operating system (OS) creates a replica of a process (i.e., a running instance of an application). The original process requesting the fork( ) operation is the parent process and the newly created process is the child process. The child process expects to have a copy of the contents of parent's address space at the time of fork. As known to those skilled in the art, the copy-on-write in a fork( ) operation applies only to a process' private memory pages. Copy-on-write is an optimization that causes physical memory pages of the parent process to be shared with the child process for memory read operations. These shared pages are marked by the OS as copy-on-write. A page that is marked copy-on-write will remain as a shared page to the parent process and child process even if both processes perform a read operation on the shared page. In an alternative implementation in, for example, the HP-UX operating system, a shared page will be marked as copy-on-write for the parent process and copy-on-access for the child process. 

 # However, when either the parent process or the child process writes to a shared page that is marked copy-on-write, a page fault exception (i.e., copy-on-write fault) occurs, where the process that is performing the write operation is given a copy of the page to be written. Copying of metadata of the shared page will occur at the time of the fork( ) operation. At the time of CoW fault, actual data are copied from the shared page. After a process writes to that copied page, that page will remain visible to that process but will not be visible to other processes until there is another instance of an event such as a fork( ) system call and the new page as marked as copy-on-write once again. The use of copy-on-write permits a very efficient fork operation because copying all pages of the parent process onto the address space of the child process is avoided by use of the shared pages. 
